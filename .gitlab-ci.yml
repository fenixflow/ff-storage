# Targeted GitLab CI/CD pipeline for Fenix packages
# - Pipelines run automatically only when a package version file changes
# - Builds rely on `uv build` for reproducible wheels
# - ff-cli and ff-parsers publish to the GitLab Package Registry when their versions bump
# - ff-logger and ff-storage provide manual gates for publishing to GitLab and PyPI

workflow:
  rules:
    - changes:
        - ff-logger/pyproject.toml
        - ff-storage/pyproject.toml
        - ff-cli/pyproject.toml
        - ff-parsers/pyproject.toml
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - when: never

stages:
  - publish_gitlab
  - publish_pypi

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"
  PYTHON_VERSION: "3.12"
  GIT_DEPTH: "0"

cache:
  paths:
    - .cache/pip
    - .cache/uv

default:
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - apt-get update && apt-get install -y git curl
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - source $HOME/.local/bin/env
    - export PATH="/root/.local/bin:$PATH"
    - uv --version
    - python --version

.publish_gitlab_template: &publish_gitlab_template
  stage: publish_gitlab
  script:
    - |
      set -euo pipefail
      echo "========================================"
      echo "GitLab publish for: ${PACKAGE}"
      echo "========================================"

      PACKAGE_DIR="${CI_PROJECT_DIR}/${PACKAGE}"
      cd "${PACKAGE_DIR}"

      echo "Cleaning previous build artifacts..."
      rm -rf dist build *.egg-info src/*.egg-info 2>/dev/null || true

      echo "Building wheel with uv..."
      uv build

      VERSION=$(python - <<'PY'
import tomllib
from pathlib import Path
data = tomllib.loads(Path("pyproject.toml").read_text())
print(data["project"]["version"])
PY
)
      echo "Package version: ${VERSION}"

      WHEEL_FILE=$(find dist -maxdepth 1 -name "*.whl" -print -quit)
      if [ -z "${WHEEL_FILE}" ]; then
        echo "❌ No wheel artifact produced for ${PACKAGE}"
        exit 1
      fi
      WHEEL_NAME=$(basename "${WHEEL_FILE}")

      PACKAGE_UNDERSCORE="${PACKAGE//-/_}"
      PACKAGE_NORMALIZED=$(python - "$PACKAGE" <<'PY'
import re
import sys
name = sys.argv[1]
print(re.sub(r"[-_.]+", "-", name).lower())
PY
)
      CHECK_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/files/${PACKAGE_NORMALIZED}/${VERSION}/${WHEEL_NAME}"

      echo "Checking for existing artifact in GitLab registry..."
      if curl -s -o /dev/null -w "%{http_code}" --head --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CHECK_URL}" | grep -qE "^(200|302)$"; then
        echo "✅ ${PACKAGE} ${VERSION} already exists in GitLab registry. Skipping upload."
        exit 0
      fi

      echo "Publishing ${PACKAGE} ${VERSION} to GitLab registry..."
      cat > ~/.pypirc << EOF
[distutils]
index-servers = gitlab

[gitlab]
repository = ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
username = gitlab-ci-token
password = ${CI_JOB_TOKEN}
EOF

      uv pip install --system twine
      python -m twine upload --repository gitlab dist/* --verbose
      echo "✅ GitLab publish complete for ${PACKAGE} ${VERSION}"

.publish_pypi_template: &publish_pypi_template
  stage: publish_pypi
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
  script:
    - |
      set -euo pipefail
      echo "========================================"
      echo "PyPI publish for: ${PACKAGE}"
      echo "========================================"

      PACKAGE_DIR="${CI_PROJECT_DIR}/${PACKAGE}"
      cd "${PACKAGE_DIR}"

      echo "Cleaning previous build artifacts..."
      rm -rf dist build *.egg-info src/*.egg-info 2>/dev/null || true

      echo "Building wheel with uv..."
      uv build

      VERSION=$(python - <<'PY'
import tomllib
from pathlib import Path
data = tomllib.loads(Path("pyproject.toml").read_text())
print(data["project"]["version"])
PY
)
      echo "Package version: ${VERSION}"

      echo "Verifying ${PACKAGE} ${VERSION} does not already exist on PyPI..."
      PACKAGE_UNDERSCORE="${PACKAGE//-/_}"
      if pip index versions "${PACKAGE_UNDERSCORE}" 2>/dev/null | grep -q "^Available versions:.*${VERSION}"; then
        echo "❌ ${PACKAGE} ${VERSION} already exists on PyPI."
        echo "Please bump the version before publishing."
        exit 1
      fi

      uv pip install --system twine
      python -m twine upload --non-interactive --verbose dist/*
      echo "✅ PyPI publish complete for ${PACKAGE} ${VERSION}"

publish:gitlab:ff-cli:
  <<: *publish_gitlab_template
  variables:
    PACKAGE: "ff-cli"
  rules:
    - changes:
        - ff-cli/pyproject.toml
      when: on_success
    - when: never

publish:gitlab:ff-parsers:
  <<: *publish_gitlab_template
  variables:
    PACKAGE: "ff-parsers"
  rules:
    - changes:
        - ff-parsers/pyproject.toml
      when: on_success
    - when: never

publish:gitlab:ff-logger:
  <<: *publish_gitlab_template
  variables:
    PACKAGE: "ff-logger"
  rules:
    - changes:
        - ff-logger/pyproject.toml
      when: manual
      allow_failure: false
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: false
    - when: never

publish:gitlab:ff-storage:
  <<: *publish_gitlab_template
  variables:
    PACKAGE: "ff-storage"
  rules:
    - changes:
        - ff-storage/pyproject.toml
      when: manual
      allow_failure: false
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: false
    - when: never

publish:pypi:ff-logger:
  <<: *publish_pypi_template
  variables:
    PACKAGE: "ff-logger"
  needs:
    - job: publish:gitlab:ff-logger
      optional: true
  rules:
    - changes:
        - ff-logger/pyproject.toml
      when: manual
      allow_failure: false
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: false
    - when: never

publish:pypi:ff-storage:
  <<: *publish_pypi_template
  variables:
    PACKAGE: "ff-storage"
  needs:
    - job: publish:gitlab:ff-storage
      optional: true
  rules:
    - changes:
        - ff-storage/pyproject.toml
      when: manual
      allow_failure: false
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: false
    - when: never
